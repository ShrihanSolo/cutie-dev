import datetime
import requests
import json
import os
from bs4 import BeautifulSoup
from typing import Dict, Tuple, List, Optional
import base64


# ============================================================
#  Crossword Grid Solver (5x5 backtracking algorithm)
# ============================================================

def solve_crossword(across_dict: Dict[str, str], down_dict: Dict[str, str]) -> Optional[List[List[str]]]:
    """
    Given across and down answers (with keys like "1A", "2D"),
    reconstruct the 5x5 crossword grid.

    Returns:
        A 5x5 grid as a list of lists of str, with "." for blanks,
        or None if no valid grid is found.
    """

    # ---------------- Helper: sort answers by clue number ----------------
    def parse_order(d: Dict[str, str]) -> List[str]:
        items = []
        for k, v in d.items():
            num = int(k[:-1])  # strip trailing A/D
            items.append((num, v))
        items.sort(key=lambda x: x[0])
        return [w for _, w in items]

    across_list = parse_order(across_dict)
    down_list = parse_order(down_dict)

    # Internal state for backtracking
    letters = [[None] * 5 for _ in range(5)]     # placed letters
    occupied = [[False] * 5 for _ in range(5)]   # occupied cells
    black = [[False] * 5 for _ in range(5)]      # black/unusable cells
    solution = []

    # Lexicographic order check (reading order)
    def lex_ge(a: Tuple[int, int], b: Tuple[int, int]) -> bool:
        return (a[0], a[1]) >= (b[0], b[1])

    # ---------------- Place Across Words ----------------
    def place_across(i: int, prev_pos: Tuple[int, int]) -> bool:
        if i == len(across_list):
            # All across words placed → move to down words
            return place_down(0, (0, 0))

        word = across_list[i]
        L = len(word)

        for r in range(5):
            for c in range(0, 5 - L + 1):
                pos = (r, c)

                # Respect reading order
                if not lex_ge(pos, prev_pos):
                    continue
                # Cell blocked
                if black[r][c]:
                    continue
                # Must be crossword start (left edge or black before)
                if c > 0 and occupied[r][c - 1]:
                    continue

                # Check conflicts for this placement
                conflict = False
                for k, ch in enumerate(word):
                    rr, cc = r, c + k
                    if black[rr][cc] or (occupied[rr][cc] and letters[rr][cc] != ch):
                        conflict = True
                        break
                if conflict:
                    continue

                # Place word, record changes
                changes = []
                for k, ch in enumerate(word):
                    rr, cc = r, c + k
                    if not occupied[rr][cc]:
                        changes.append((rr, cc))
                        occupied[rr][cc] = True
                        letters[rr][cc] = ch

                # Mark left neighbor as black if needed
                left_changed = None
                if c > 0 and not black[r][c - 1]:
                    left_changed = (r, c - 1)
                    black[r][c - 1] = True

                # Recurse
                if place_across(i + 1, pos):
                    return True

                # Undo on backtrack
                if left_changed:
                    rr, cc = left_changed
                    black[rr][cc] = False
                for rr, cc in changes:
                    occupied[rr][cc] = False
                    letters[rr][cc] = None

        return False

    # ---------------- Place Down Words ----------------
    def place_down(j: int, prev_pos: Tuple[int, int]) -> bool:
        if j == len(down_list):
            # All down words placed → success
            grid = [['.' for _ in range(5)] for __ in range(5)]
            for r in range(5):
                for c in range(5):
                    if occupied[r][c]:
                        grid[r][c] = letters[r][c]
            solution.append(grid)
            return True

        word = down_list[j]
        L = len(word)

        for r in range(0, 5 - L + 1):
            for c in range(5):
                pos = (r, c)

                # Respect reading order
                if not lex_ge(pos, prev_pos):
                    continue
                # Cell blocked
                if black[r][c]:
                    continue
                # Must be crossword start (top edge or black above)
                if r > 0 and occupied[r - 1][c]:
                    continue

                # Check conflicts
                conflict = False
                for k, ch in enumerate(word):
                    rr, cc = r + k, c
                    if black[rr][cc] or (occupied[rr][cc] and letters[rr][cc] != ch):
                        conflict = True
                        break
                if conflict:
                    continue

                # Place word, record changes
                changes = []
                for k, ch in enumerate(word):
                    rr, cc = r + k, c
                    if not occupied[rr][cc]:
                        changes.append((rr, cc))
                        occupied[rr][cc] = True
                        letters[rr][cc] = ch

                # Mark above neighbor as black if needed
                above_changed = None
                if r > 0 and not black[r - 1][c]:
                    above_changed = (r - 1, c)
                    black[r - 1][c] = True

                # Recurse
                if place_down(j + 1, pos):
                    return True

                # Undo on backtrack
                if above_changed:
                    rr, cc = above_changed
                    black[rr][cc] = False
                for rr, cc in changes:
                    occupied[rr][cc] = False
                    letters[rr][cc] = None

        return False

    # Start recursion
    place_across(0, (0, 0))

    return solution[0] if solution else None


# ============================================================
#  Scraper for one crossword
# ============================================================

def fetch_crossword(date: str) -> Dict:
    """
    Fetch crossword data for a given date, reconstruct the grid,
    and return a JSON-serializable dictionary.
    """

    # --- Build URL for the date ---
    date_obj = datetime.datetime.strptime(date, "%Y-%m-%d")
    day = str(int(date_obj.strftime("%d"))).lower()
    day_of_week = date_obj.strftime("%A").lower()
    month = date_obj.strftime("%B").lower()
    if len(month) > 5:
        month = date_obj.strftime("%b").lower()

    url = f"https://www.cnet.com/tech/gaming/todays-nyt-mini-crossword-answers-for-{day_of_week}-{month}-{day}/"

    # --- Fetch page ---
    response = requests.get(url)
    if response.status_code != 200:
        raise RuntimeError(f"Failed to fetch {url} (status {response.status_code})")

    soup = BeautifulSoup(response.text, "html.parser")

    # --- Parse clues + answers ---
    clues_across, clues_down, answers = {}, {}, {}
    for p in soup.find_all("p"):
        strong_tag = p.find("strong")
        if not strong_tag:
            continue

        full_text = p.get_text(separator=" ", strip=True)
        answer_text = strong_tag.get_text().replace("Answer: ", "").strip().upper()
        clue_text = full_text.replace(strong_tag.get_text(), "").strip(" :")

        if clue_text and clue_text[0].isdigit():
            number_part = clue_text.split()[0]  # e.g. "1A"
            number = ''.join(filter(str.isdigit, number_part))
            direction = "across" if "A" in number_part.upper() else "down"

            # Store clue
            if direction == "across":
                clues_across[number] = clue_text[len(number_part) + 7:].strip()
            else:
                clues_down[number] = clue_text[len(number_part) + 7:].strip()

            # Store answer
            answers[number_part.upper()] = answer_text

    # --- Split answers into across/down dicts ---
    a_dict = {k: v for k, v in answers.items() if k.endswith("A")}
    d_dict = {k: v for k, v in answers.items() if k.endswith("D")}

    # --- Solve for the grid ---
    grid = solve_crossword(a_dict, d_dict)

    # print(url)
    # print(clues_across)
    # print(clues_down)
    # print(answers)

    return {
        "date": date,
        "grid": grid,
        "clues": {
            "across": clues_across,
            "down": clues_down
        }
    }


# ============================================================
#  Batch fetcher for multiple days
# ============================================================

def fetch_crosswords_for_past_n_days(start_date: str, n_days: int = 7, save_folder: str = ".") -> None:
    """
    Fetch and save crosswords for the past N days starting from `start_date`.

    Args:
        start_date: Starting date in YYYY-MM-DD format.
        n_days: How many days back to fetch (inclusive).
        save_folder: Directory to save JSON files.
    """

    os.makedirs(save_folder, exist_ok=True)
    start_date_obj = datetime.datetime.strptime(start_date, "%Y-%m-%d")

    for delta in range(0, n_days + 1):
        current_date = start_date_obj - datetime.timedelta(days=delta)
        date_str = current_date.strftime("%Y-%m-%d")

        try:
            crossword_data = fetch_crossword(date_str)
            # Convert dict → JSON string
            json_str = json.dumps(crossword_data)

            # Encode JSON string → Base64
            encoded = base64.b64encode(json_str.encode("utf-8")).decode("utf-8")

            file_path = f"{save_folder}/{date_str}.json"

            # Save the encoded string directly (not as JSON object, just text)
            with open(file_path, "w") as f:
                f.write(encoded)

            print(f"✅ Saved {file_path}")
        except Exception as e:
            print(f"❌ Failed for {date_str}: {e}")
            
# fetch todays date in Y-m-d
date = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%Y-%m-%d")
fetch_crosswords_for_past_n_days(date, 3, "../puzzles")